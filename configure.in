dnl
dnl Script for autoconf 2.57
dnl !!! Do not use with earlier versions of autoconf !!!
dnl

dnl Initialize
AC_INIT(src/dxirc.cpp)
AM_INIT_AUTOMAKE(dxirc,0.70.svn)
AM_CONFIG_HEADER(config.h)

dnl Is this really necessary?
dnl AC_GNU_SOURCE

AC_USE_SYSTEM_EXTENSIONS

dnl Prevents setting compilation flags
CXXFLAGS=""

dnl Checks for compilers
AC_PROG_MAKE_SET
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
dnl AC_PROG_LIBTOOL

dnl Large files support
AC_SYS_LARGEFILE

dnl Internationalisation
AM_GNU_GETTEXT

dnl Trayicon
AC_ARG_ENABLE(tray,[AC_HELP_STRING([--disable-tray],[disable trayicon])],enable_tray="$enableval",enable_tray="yes")
AC_SUBST(enable_tray)
if test "x$enable_tray" = "xyes"; then
  AC_DEFINE(HAVE_TRAY,1, Build with trayicon)
  AM_CONDITIONAL([HAVE_TRAY], true)
else
  AM_CONDITIONAL([HAVE_TRAY], false)
fi

dnl Checks for IPv6
AC_MSG_CHECKING([whether to enable IPv6])
AC_ARG_ENABLE(ipv6,[AC_HELP_STRING([--disable-ipv6],[disable IPv6 support])],enable_ipv6="$enableval",enable_ipv6="yes")
have_ipv6=no
AC_RUN_IFELSE([AC_LANG_SOURCE([ /* is AF_INET6 available? */
#include <sys/types.h>
#include <sys/socket.h>
main()
{
 if (socket(AF_INET6, SOCK_STREAM, 0) < 0)
   exit(1);
 else
   exit(0);
}
])],
AC_MSG_RESULT(yes)
have_ipv6=yes,
AC_MSG_RESULT(no)
have_ipv6=no,
AC_MSG_RESULT(no)
have_ipv6=no
)
if test "$have_ipv6" = "yes"; then
  AC_DEFINE(ENABLE_IPV6,1, system has IPv6 support)
fi

CURL_CHECK_FUNC_INET_NTOP
CURL_CHECK_FUNC_INET_PTON

dnl Check for SSL (OpenSSL)
AC_ARG_ENABLE(ssl,[AC_HELP_STRING([--disable-ssl],[disable Secure Sockets Layer support])],enable_ssl="$enableval",enable_ssl="yes")
have_openssl=no
if test "x$enable_ssl" = "xyes"; then
  PKG_CHECK_MODULES(SSL, openssl, :, :)
  if test "$SSL_LIBS"; then
    CXXFLAGS="${CXXFLAGS} $SSL_CFLAGS"
    have_openssl=yes
  else
    AC_CHECK_LIB(ssl, SSL_read, [
      AC_CHECK_HEADERS(openssl/ssl.h openssl/err.h, [
        SSL_LIBS="-lssl -lcrypto"
        AC_SUBST(SSL_LIBS)
    have_openssl=yes
      ])
    ],, -lcrypto)
  fi
  if test "$have_openssl" = "yes"; then
    AC_DEFINE(HAVE_OPENSSL,1, Build with OpenSSL support)
    LIBS="$LIBS $SSL_LIBS"
  fi
fi

dnl Check for Lua
AC_ARG_ENABLE(lua,[AC_HELP_STRING([--disable-lua],[disable Lua scripting])],enable_lua="$enableval",enable_lua="yes")
have_lua=no
if test "x$enable_lua" = "xyes"; then
  PKG_CHECK_MODULES(LUA, lua5.1,
    [ have_lua=yes ],
    [
    AC_MSG_WARN([lua5.1 not found, trying lua >= 5.1 instead])
    PKG_CHECK_MODULES(LUA, lua >= 5.1,
      [ have_lua=yes ],
      [
        have_lua=yes
        AC_CHECK_HEADERS([lua.h lauxlib.h lualib.h],
          [],
          [ have_lua=no ] )
        AC_CHECK_LIB(  lua5.1 , luaL_newstate,
          [LUA_LIBS="-llua5.1"],
          AC_CHECK_LIB( lua51 , luaL_newstate,
            [LUA_LIBS="-llua51"],
            AC_CHECK_LIB( lua , luaL_newstate,
              [LUA_LIBS="-llua"],
              [ have_lua=no
                AC_MSG_WARN([lua >= 5.1 not found!])
              ],[-lm])
          )
        )
      ])
    ])
  if test "x${have_lua}" = "xyes" ;  then
     AC_DEFINE(HAVE_LUA, 1, Build with Lua scripting support)
     LIBS="$LIBS $LUA_LIBS"
     CXXFLAGS="${CXXFLAGS} $LUA_CFLAGS"
  fi
fi

dnl Check for enchant
AC_ARG_ENABLE(enchant,[AC_HELP_STRING([--disable-enchant],[disable spellchecking support])],,enable_enchant="yes")
have_enchant=no
if test "x$enable_enchant" = "xyes"; then
  PKG_CHECK_MODULES(ENCHANT, enchant, :, :)
  if test "$ENCHANT_LIBS"; then
    have_enchant=yes
    AC_DEFINE(HAVE_ENCHANT,1, Build with spellchecking support by enchant)
    CXXFLAGS="${CXXFLAGS} $ENCHANT_CFLAGS"
    LIBS="$LIBS $ENCHANT_LIBS"
  fi
fi

dnl Check if we should compile with X support
PKG_CHECK_MODULES(X11, x11, [AC_DEFINE(HAVE_X11, 1, [Define to 1 if you have X11])])
LIBS="$LIBS $X11_LIBS"
CXXFLAGS="${CXXFLAGS} $X11_CFLAGS"

dnl Check for libnotify support
LIBNOTIFY_REQUIRED=0.7.0
have_libnotify=no
AC_ARG_ENABLE(libnotify,
    [AC_HELP_STRING([--disable-libnotify],[disable libnotify support])],
    [enable_libnotify=$enableval], [enable_libnotify=auto])
if test "x$enable_libnotify" != "xno"; then
  PKG_CHECK_MODULES(LIBNOTIFY, libnotify >= $LIBNOTIFY_REQUIRED,
    have_libnotify=yes, have_libnotify=no)
  if test "x$have_libnotify" = "xno" -a "x$enable_libnotify" = "xyes"; then
    AC_MSG_ERROR([libnotify support explicitly requested, but libnotify couldn't be found or is too old])
  fi
  if test "x$have_libnotify" = "xyes"; then
    enable_libnotify=yes
  else
    enable_libnotify=no
  fi
fi
if test "x$enable_libnotify" = "xyes"; then
  AC_DEFINE(HAVE_LIBNOTIFY,1, Build with libnotify support)
  CXXFLAGS="${CXXFLAGS} $LIBNOTIFY_CFLAGS"
  LIBS="$LIBS $LIBNOTIFY_LIBS"
fi

dnl Check for FOX 1.6
AC_CHECK_LIB(FOX-1.6,fxfindfox,,AC_MSG_ERROR("libFOX-1.6 not found"))

dnl Check for FOX 1.6 header files
AC_HEADER_STDC
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(fox-1.6/fx.h,,AC_MSG_ERROR("fox-1.6/fx.h not found"))

dnl Check if fox-config exists
AC_CHECK_PROGS(FOX_CONFIG,fox-config-1.6 fox-1.6-config fox-config)
if test no"$FOX_CONFIG" = no ; then
    AC_MSG_ERROR("fox-config not found")               
fi

dnl Include flags for the FOX library
FOXCFLAGS=`$FOX_CONFIG --cflags`
CXXFLAGS="${CXXFLAGS} $FOXCFLAGS"
FOXLIBS=`$FOX_CONFIG --libs`
LIBS="$LIBS $FOXLIBS"

dnl Check for utils::checkWord
dnl have_spellutils=no
dnl AC_MSG_CHECKING(for utils::checkWord)
dnl AC_TRY_COMPILE([#include "src/utils.h"],
dnl [utils::instance().checkWord("test","cs");],
dnl [AC_DEFINE(HAVE_SPELLUTILS,1, namespace utils have spellchecking support) have_spellutils=yes])
dnl AC_MSG_RESULT($have_spellutils)
dnl I know answer :)
AC_DEFINE(HAVE_SPELLUTILS,1, namespace utils have spellchecking support)

dnl Check for libPNG
AC_CHECK_LIB(png, png_read_info,,AC_MSG_ERROR("libPNG not found"))
AC_CHECK_HEADERS(png.h,,AC_MSG_ERROR("png.h not found"))

dnl Debugging turned on
AC_MSG_CHECKING(for debugging)
AC_ARG_ENABLE(debug,[AC_HELP_STRING([--enable-debug],[compile for debugging])])
AC_MSG_RESULT([$enable_debug])
if test "x$enable_debug" = "xyes" ; then
    CXXFLAGS="${CXXFLAGS} -Wall -g -DDEBUG"
else
    CXXFLAGS="-O2 ${CXXFLAGS}"
fi

dnl Building for release
AC_MSG_CHECKING(for release build)
AC_ARG_ENABLE(release,[AC_HELP_STRING([--enable-release],[compile for release (advanced optimizations)])])
AC_MSG_RESULT([$enable_release])
if test "x$enable_release" = "xyes" ; then
    CXXFLAGS="${CXXFLAGS} -DNDEBUG"
    if test "${GXX}" = "yes" ; then
        CXXFLAGS="${CXXFLAGS} -Wuninitialized -ffast-math -finline-functions -fomit-frame-pointer -fexpensive-optimizations -fno-strict-aliasing"
    fi
fi

dnl Output
AC_OUTPUT(Makefile intl/Makefile m4/Makefile po/Makefile.in dxirc.spec src/Makefile
          icons/Makefile icons/default/Makefile icons/flags/Makefile icons/smileys/Makefile sounds/Makefile)

echo
echo "Configure finished!"
echo "Install prefix:                             $prefix"
echo "Build with IPv6:                            $have_ipv6"
echo "Build with tray support:                    $enable_tray"
echo "Build with libnotify support:               $have_libnotify"
echo "Build with lua scripting support:           $have_lua"
echo "Build with SSL:                             $have_openssl"
echo "Build with spellchecking support:           $have_enchant"
echo
echo "              Do:  'make' to compile dxirc."
echo "            Then:  'make install' (as root) to install dxirc."
echo


